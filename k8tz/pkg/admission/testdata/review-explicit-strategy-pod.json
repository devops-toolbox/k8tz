{
    "kind": "AdmissionReview",
    "apiVersion": "admission.k8s.io/v1",
    "request": {
        "uid": "0c0829ff-c2f5-4634-a1c3-098147304d03",
        "kind": {
            "group": "",
            "version": "v1",
            "kind": "Pod"
        },
        "resource": {
            "group": "",
            "version": "v1",
            "resource": "pods"
        },
        "requestKind": {
            "group": "",
            "version": "v1",
            "kind": "Pod"
        },
        "requestResource": {
            "group": "",
            "version": "v1",
            "resource": "pods"
        },
        "name": "elasticsearch-master-0",
        "namespace": "default",
        "operation": "CREATE",
        "userInfo": {
            "username": "system:serviceaccount:kube-system:statefulset-controller",
            "uid": "9106ec03-8d1e-4bfb-8226-023f2827650c",
            "groups": [
                "system:serviceaccounts",
                "system:serviceaccounts:kube-system",
                "system:authenticated"
            ]
        },
        "object": {
            "kind": "Pod",
            "apiVersion": "v1",
            "metadata": {
                "name": "elasticsearch-master-0",
                "generateName": "elasticsearch-master-",
                "namespace": "default",
                "creationTimestamp": null,
                "annotations": {
                    "k8tz.io/strategy": "hostPath"
                },
                "labels": {
                    "app": "elasticsearch-master",
                    "chart": "elasticsearch",
                    "controller-revision-hash": "elasticsearch-master-5dbfcdb447",
                    "release": "my-elasticsearch",
                    "statefulset.kubernetes.io/pod-name": "elasticsearch-master-0"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "StatefulSet",
                        "name": "elasticsearch-master",
                        "uid": "69e92395-6b4d-4e36-85a0-ec0b69891ade",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "elasticsearch-master",
                        "persistentVolumeClaim": {
                            "claimName": "elasticsearch-master-elasticsearch-master-0"
                        }
                    },
                    {
                        "name": "kube-api-access-57zrp",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "initContainers": [
                    {
                        "name": "configure-sysctl",
                        "image": "docker.elastic.co/elasticsearch/elasticsearch:7.14.0",
                        "command": [
                            "sysctl",
                            "-w",
                            "vm.max_map_count=262144"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-api-access-57zrp",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true,
                            "runAsUser": 0
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "elasticsearch",
                        "image": "docker.elastic.co/elasticsearch/elasticsearch:7.14.0",
                        "ports": [
                            {
                                "name": "http",
                                "containerPort": 9200,
                                "protocol": "TCP"
                            },
                            {
                                "name": "transport",
                                "containerPort": 9300,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "node.name",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "cluster.initial_master_nodes",
                                "value": "elasticsearch-master-0,"
                            },
                            {
                                "name": "discovery.seed_hosts",
                                "value": "elasticsearch-master-headless"
                            },
                            {
                                "name": "cluster.name",
                                "value": "elasticsearch"
                            },
                            {
                                "name": "network.host",
                                "value": "0.0.0.0"
                            },
                            {
                                "name": "node.data",
                                "value": "true"
                            },
                            {
                                "name": "node.ingest",
                                "value": "true"
                            },
                            {
                                "name": "node.master",
                                "value": "true"
                            },
                            {
                                "name": "node.ml",
                                "value": "true"
                            },
                            {
                                "name": "node.remote_cluster_client",
                                "value": "true"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "1",
                                "memory": "2Gi"
                            },
                            "requests": {
                                "cpu": "1",
                                "memory": "2Gi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "elasticsearch-master",
                                "mountPath": "/usr/share/elasticsearch/data"
                            },
                            {
                                "name": "kube-api-access-57zrp",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "readinessProbe": {
                            "exec": {
                                "command": [
                                    "sh",
                                    "-c",
                                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: \"wait_for_status=green\u0026timeout=1s\" )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Elasticsearch Docker using nss \u003c 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n  local path=\"${1}\"\n  local args=\"${2}\"\n  set -- -XGET -s\n\n  if [ \"$args\" != \"\" ]; then\n    set -- \"$@\" $args\n  fi\n\n  if [ -n \"${ELASTIC_USERNAME}\" ] \u0026\u0026 [ -n \"${ELASTIC_PASSWORD}\" ]; then\n    set -- \"$@\" -u \"${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\n  fi\n\n  curl --output /dev/null -k \"$@\" \"http://127.0.0.1:9200${path}\"\n}\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(http \"/\" \"-w %{http_code}\")\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" \u0026\u0026 \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n  if http \"/_cluster/health?wait_for_status=green\u0026timeout=1s\" \"--fail\" ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                                ]
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 3,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "drop": [
                                    "ALL"
                                ]
                            },
                            "runAsUser": 1000,
                            "runAsNonRoot": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 120,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "securityContext": {
                    "runAsUser": 1000,
                    "fsGroup": 1000
                },
                "hostname": "elasticsearch-master-0",
                "subdomain": "elasticsearch-master-headless",
                "affinity": {
                    "podAntiAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": [
                            {
                                "labelSelector": {
                                    "matchExpressions": [
                                        {
                                            "key": "app",
                                            "operator": "In",
                                            "values": [
                                                "elasticsearch-master"
                                            ]
                                        }
                                    ]
                                },
                                "topologyKey": "kubernetes.io/hostname"
                            }
                        ]
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {}
        },
        "oldObject": null,
        "dryRun": false,
        "options": {
            "kind": "CreateOptions",
            "apiVersion": "meta.k8s.io/v1"
        }
    }
}
